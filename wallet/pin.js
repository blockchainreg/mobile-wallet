// Generated by LiveScript 1.5.0
(function () {
  var aes,
    md5,
    wordsToUtf8,
    mem,
    getKey,
    set,
    exists,
    encrypt,
    check,
    out$ = (typeof exports != 'undefined' && exports) || this,
    toString$ = {}.toString;
  aes = require('crypto-js/aes');
  md5 = require('crypto-js/md5');
  wordsToUtf8 = require('./words-to-utf8.js');
  mem = {
    encrypt: null,
  };
  getKey = function (value) {
    return value + 'cb562eb3-c442-4866-a1a9-70a9';
  };
  out$.set = set = function (value) {
    var key, res;
    key = getKey(value);
    res = aes.encrypt(value, key).toString();

    localStorage.setItem('spin', res);
    console.log('Pin set', typeof res, res);
  };
  out$.exists = exists = function () {
    var ref$;
    console.log('Pin exists', localStorage.getItem('spin'));
    return ((ref$ = localStorage.getItem('spin')) != null ? ref$ : '') !== '';
  };
  out$.encrypt = encrypt = function (str) {
    if (toString$.call(mem.encrypt).slice(8, -1) === 'Function') {
      return mem.encrypt(str);
    }
    return 'unsecure';
  };
  out$.check = check = function (value) {
    try {
      var res, ref$, key, decrypted;
      if (toString$.call(value).slice(8, -1) !== 'String') {
        return false;
      }
      if (value.length < 6) {
        return false;
      }
      mem.encrypt = function (str) {
        return md5(value + '234ef' + str).toString();
      };
      res = (ref$ = localStorage.getItem('spin')) != null ? ref$ : '';
      if (res.length === 0) {
        return false;
      }
      key = getKey(value);
      decrypted = aes.decrypt(res, key).toString(wordsToUtf8);
      return decrypted === value;
    } catch (e) {
      console.log(e);
      return false;
    }
  };
}.call(this));
