// Generated by LiveScript 1.5.0
(function () {
  var each, web3, round5, getPrimaryInfo, navigate, applyTransactions, times;
  each = require('prelude-ls').each;
  web3 = require('./web3.js');
  round5 = require('./round5.js');
  getPrimaryInfo = require('./get-primary-info.js');
  navigate = require('./navigate.js');
  applyTransactions = require('./apply-transactions.js');
  times = require('./math.js').times;
  module.exports = function (store, web3t, wallets, wallet) {
    var index,
      send,
      swap,
      receive,
      usdRate,
      ref$,
      uninstall,
      expand,
      active,
      big,
      balance,
      balanceUsd,
      pending,
      style,
      buttonStyle,
      last;
    if (store == null || web3t == null || wallets == null || wallet == null) {
      return null;
    }
    index = wallets.indexOf(wallet);
    if (store == null || wallet == null) {
      return null;
    }
    send = curry$(function (wallet, event) {
      var sendTransaction, to, value;
      if (wallet == null) {
        return alert('Not yet loaded');
      }
      sendTransaction = web3t[wallet.coin.token].sendTransaction;
      to = '';
      value = 0;
      return sendTransaction(
        {
          to: to,
          value: value,
        },
        function (err) {
          if (err != null) {
            return console.log(err);
          }
        }
      );
    });
    receive = curry$(function (wallet, event) {
      var network;
      store.current.sendMenuOpen = false;
      network = wallet.coin[store.current.network];
      importAll$(store.current.invoice, {
        coin: wallet.coin,
        wallet: wallet,
        network: network,
      });
      return navigate(store, web3t, 'invoice');
    });
    swap = curry$(function (wallet, event) {
      console.log('prepare Swap fnction...');
      var cb, sendTransaction, config;
      cb = console.log;
      store.current.send.contractAddress = null;
      store.current.send.isSwap = true;
      if (wallet == null) {
        return alert('Not yet loaded');
      }
      if (web3t[wallet.coin.token] == null) {
        return alert('Not yet loaded');
      }
      sendTransaction = web3t[wallet.coin.token].sendTransaction;
      config = {
        to: '',
        value: 0,
        swap: true,
        gas: 1000000,
      };
      return sendTransaction(config, function (err) {
        if (err != null) {
          store.current.send.error = err;
        }
        if (err != null) {
          return cb(err);
        }
      });
    });
    usdRate =
      (ref$ = wallet != null ? wallet.usdRate : void 8) != null ? ref$ : 0;
    uninstall = function () {
      if (store.current.refreshing) {
        return;
      }
      return web3t.uninstall(wallet.coin.token, function () {
        return web3t.refresh(function () {});
      });
    };
    expand = function () {
      store.current.walletIndex = index;
      store.current.filter.length = 0;
      store.current.filter = ['IN', 'OUT', wallet.coin.token];
      return applyTransactions(store);
    };
    active = index === store.current.walletIndex ? 'active' : '';
    big = (function () {
      switch (false) {
        case index !== store.current.walletIndex:
          return 'big';
        case !(wallets.length < 3):
          return 'big';
        default:
          return '';
      }
    })();
    var token = (wallet.coin.nickname || wallet.coin.token).toUpperCase();
    if (token === 'VLX2') token = 'VLX';

    balance = round5(wallet.balance);
    balanceUsd = round5(times(balance, usdRate)) + ' USD';
    pending = round5(wallet.pendingSent) + ' ' + token;
    style = getPrimaryInfo(store);
    buttonStyle = {
      color: style.app.text,
      background: style.app.background + '36',
      border: '1px solid ' + style.app.border,
    };
    last = (function () {
      switch (false) {
        case !(wallets.length < 4 && index + 1 === wallets.length):
          return 'last';
        default:
          return '';
      }
    })();
    return {
      buttonStyle: buttonStyle,
      wallet: wallet,
      active: active,
      big: big,
      token: token,
      balance: balance,
      balanceUsd: balanceUsd,
      pending: pending,
      send: send,
      swap: swap,
      expand: expand,
      usdRate: usdRate,
      last: last,
      receive: receive,
      uninstall: uninstall,
    };
  };
  function curry$(f, bound) {
    var context,
      _curry = function (args) {
        return f.length > 1
          ? function () {
              var params = args ? args.concat() : [];
              context = bound ? context || this : this;
              return params.push.apply(params, arguments) < f.length &&
                arguments.length
                ? _curry.call(context, params)
                : f.apply(context, params);
            }
          : f;
      };
    return _curry();
  }
  function importAll$(obj, src) {
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}.call(this));
