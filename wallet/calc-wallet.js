// Generated by LiveScript 1.5.0
(function(){
  var getBalance, ref$, times, plus, find, map, pairsToObj, foldl, filter, run, task, round5, calcWallet;
  getBalance = require('./api.js').getBalance;
  ref$ = require('./math.js'), times = ref$.times, plus = ref$.plus;
  ref$ = require('prelude-ls'), find = ref$.find, map = ref$.map, pairsToObj = ref$.pairsToObj, foldl = ref$.foldl, filter = ref$.filter;
  ref$ = require('./workflow.js'), run = ref$.run, task = ref$.task;
  round5 = require('./round5.js');
  calcWallet = function(store, cb){
    var wallets, rates, state, buildLoader, loaders, tasks;
    if (store == null) {
      return cb("Store is required");
    }
    wallets = store.current.account.wallets;
    rates = store.rates;
    state = {
      balanceUsd: 0
    };
    if (typeof err != 'undefined' && err !== null) {
      return cb(err);
    }
    buildLoader = function(wallet){
      return task(function(cb){
        var token, usdRate, ref$, eurRate;
        token = wallet.coin.token;
        token = wallet.coin.token.toLowerCase();
        usdRate = (ref$ = rates[token]) != null ? ref$ : '..';
        wallet.usdRate = (function(){
          switch (false) {
          case usdRate !== '..':
            return '..';
          default:
            return round5(usdRate);
          }
        }());
        eurRate = 0.893191;
        wallet.eurRate = (function(){
          switch (false) {
          case usdRate !== '..':
            return '..';
          default:
            return round5(times(usdRate, eurRate));
          }
        }());
        return getBalance({
          address: wallet.address,
          network: wallet.network,
          token: token,
          account: {
            address: wallet.address,
            privateKey: wallet.privateKey
          }
        }, function(err, balance){
          var pendingSent, this$ = this;
          if (err != null) {
          	console.log("build loader for " + token + " err", err);
          	//balance = 0;
          }
          pendingSent = 0;
          // map(function(it){
          //   return it.amount;
          // })(
          // filter(function(it){
          //   return it.pending === true;
          // })(
          // filter(function(it){
          //   return it.token === token;
          // })(
          // store.transactions.all))));
          wallet.pendingSent = pendingSent;
          wallet.balance = (function(){
				switch (false) {
					case !isNaN(balance):
						return '..';
					default:
						return balance+"";
				}
			}());
          wallet.balanceUsd = (function(){
            switch (false) {
				case !isNaN(balance) && !isNaN(usdRate):
					return '..';
				default:
					return times(balance+"", usdRate+"");
            }
          }());
          var walletBalanceUSD = isNaN(wallet.balanceUsd) ? 0 : wallet.balanceUsd;
          state.balanceUsd = plus(state.balanceUsd, walletBalanceUSD);
          return cb();
        });
      });
    };
    loaders = map(buildLoader)(
    wallets);
    tasks = pairsToObj(
    map(function(it){
      return [loaders.indexOf(it).toString(), it];
    })(
    loaders));
    return run([tasks]).then(function(){
      if (typeof err != 'undefined' && err !== null) {
        return cb(err);
      }
      store.current.balanceUsd = round5(state.balanceUsd);
      return cb(null);
    });
  };
  module.exports = calcWallet;
}).call(this);
