// Generated by LiveScript 1.6.0
(function () {
  var velasWeb3, addresses, velasSolanaWeb3, NStaking, find, abis;
  velasWeb3 = require('./velas-web3.js');
  addresses = require('./addresses.js');
  velasSolanaWeb3 = require('./velas-solana-web3.js');
  NStaking = require('./velas-staking.js');
  find = require('prelude-ls').find;
  abis = {
    Staking: require('../../web3t/contracts/StakingAuRa.json').abi,
    ValidatorSet: require('../../web3t/contracts/ValidatorSetAuRa.json').abi,
    BlockReward: require('../../web3t/contracts/BlockRewardAuRa.json').abi,
    Development: require('../../web3t/contracts/VelasDevelopment.json').abi,
    Resolver: require('../../web3t/contracts/LockupResolver.json').abi,
    Timelock: require('../../web3t/contracts/LockupTimelock.json').abi,
    EvmToNativeBridge: require('../../web3t/contracts/EvmToNativeBridge.json')
      .abi,
    HomeBridgeNativeToErc:
      require('../../web3t/contracts/HomeBridgeNativeToErc.json').abi,
    ForeignBridgeNativeToErc:
      require('../../web3t/contracts/ForeignBridgeNativeToErc.json').abi,
    ERC20BridgeToken: require('../../web3t/contracts/ERC20BridgeToken.json')
      .abi,
  };
  module.exports = function (store) {
    var web3,
      network,
      stakingAddress,
      validatorSetAddress,
      blockRewardAddress,
      developmentContractAddress,
      resolverContractAddress,
      homeBridgeAddress,
      foreignBridgeAddress,
      ERC20BridgeToken,
      EvmToNativeBridgeAddress,
      web3Solana,
      networks,
      api;
    web3 = velasWeb3(store);
    network = store.current.network;
    stakingAddress = addresses[network].Staking;
    validatorSetAddress = addresses[network].ValidatorSet;
    blockRewardAddress = addresses[network].BlockReward;
    developmentContractAddress = addresses[network].Development;
    resolverContractAddress = addresses[network].ResolverAuRa;
    homeBridgeAddress = addresses[network].HomeBridge;
    foreignBridgeAddress = addresses[network].ForeignBridge;
    ERC20BridgeToken = addresses[network].ERC20BridgeToken;
    EvmToNativeBridgeAddress = addresses[network].EvmToNative;
    web3Solana = velasSolanaWeb3(store);
    networks = {
      mainnet: 'https://api.velas.com',
      testnet: 'https://explorer.testnet.velas.com/rpc',
    };
    api = {
      Staking: web3.eth.contract(abis.Staking).at(stakingAddress),
      NativeStaking: new NStaking({
        NODE_HOST: networks[network],
      }),
      Connection: new web3Solana.Connection(web3Solana._rpcEndpoint),
      StakingLockup: web3.eth.contract(abis.Staking),
      ValidatorSet: web3.eth
        .contract(abis.ValidatorSet)
        .at(validatorSetAddress),
      BlockReward: web3.eth.contract(abis.BlockReward).at(blockRewardAddress),
      Development: web3.eth
        .contract(abis.Development)
        .at(developmentContractAddress),
      Resolver: web3.eth.contract(abis.Resolver).at(resolverContractAddress),
      Timelock: web3.eth.contract(abis.Timelock),
      web3: web3.eth,
      EvmToNativeBridge: web3.eth
        .contract(abis.EvmToNativeBridge)
        .at(EvmToNativeBridgeAddress),
      HomeBridgeNativeToErc: web3.eth
        .contract(abis.HomeBridgeNativeToErc)
        .at(homeBridgeAddress),
      ForeignBridgeNativeToErc: web3.eth
        .contract(abis.ForeignBridgeNativeToErc)
        .at(foreignBridgeAddress),
      ERC20BridgeToken: web3.eth
        .contract(abis.ERC20BridgeToken)
        .at(ERC20BridgeToken),
    };
    return api;
  };
}.call(this));
