// Generated by LiveScript 1.5.0
(function () {
  var providers,
    apiErrorHandler,
    toJS,
    toString$,
    ref$,
    pairsToObj,
    objToPairs,
    action,
    calcFee,
    getKeys,
    getBalance,
    isValidAddress,
    getTransactions,
    createTransaction,
    pushTx,
    out$ = (typeof exports != 'undefined' && exports) || this;
  providers = require('./providers.js');
  apiErrorHandler = require('./api-error-handler.js');
  toString$ = {}.toString;
  toJS = require('mobx').toJS;
  (ref$ = require('prelude-ls')),
    (pairsToObj = ref$.pairsToObj),
    (objToPairs = ref$.objToPairs);
  action = function (func) {
    return function (config, cb) {
      var ref$, ref1$, provider, ref2$;
      if (
        (config != null
          ? (ref$ = config.network) != null
            ? (ref1$ = ref$.api) != null
              ? ref1$.provider
              : void 8
            : void 8
          : void 8) == null
      ) {
        return cb('provider is not defined');
      }
      provider = providers[config.network.api.provider];
      return func(provider, config, cb);
    };
  };
  out$.calcFee = calcFee = action(function (provider, config, cb) {
    return provider.calcFee(config, cb);
  });

  // var caches = Object.create(null);
  // out$.getKeys = getKeys = function(config, cb){
  //   //getKeys is very slow on mobile wallet
  //   //So we add caching. I bet it can be done sipmplier with standard ls library
  //
  //   var key = JSON.stringify(config);
  //   if (!caches[key]) {
  //     var result = null;
  //     var q = [];
  //     out$.getKeys_(config, (err, data) => {
  //       result = {err, data};
  //       while(q.length > 0) {
  //         q.pop()(err, data);
  //       }
  //     });
  //     caches[key] = cb => {
  //       if (result) {
  //         cb(result.err, result.data);
  //         return;
  //       }
  //       q.push(cb);
  //     };
  //   }
  //   return caches[key](cb);
  // };
  out$.getTransactionInfo = action(function (provider, config, cb) {
    if (
      toString$.call(provider.getTransactionInfo).slice(8, -1) !== 'Function'
    ) {
      return cb('method is not supported');
    }
    return provider.getTransactionInfo(config, cb);
  });
  out$.getKeys = getKeys = action(function (provider, config, cb) {
    return provider.getKeys(config, cb);
  });
  out$.getBalance = getBalance = action(function (provider, config, cb) {
    return provider.getBalance(config, cb);
  });
  out$.getTransactions = getTransactions = action(function (
    provider,
    config,
    cb
  ) {
    return provider.getTransactions(config, cb);
  });
  out$.createTransaction = createTransaction = action(function (
    provider,
    config,
    cb
  ) {
    return provider.createTransaction(config, cb);
  });
  out$.pushTx = pushTx = action(function (provider, config, cb) {
    return provider.pushTx(config, (err, result) => {
      if (err) {
        return cb(apiErrorHandler.handleError(err));
      }
      return cb(err, result);
    });
  });
  out$.isValidAddress = isValidAddress = action(function (
    provider,
    config,
    cb
  ) {
    return provider.isValidAddress
      ? provider.isValidAddress(config, cb)
      : cb('method is not supported');
  });
}.call(this));
